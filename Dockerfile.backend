# Backend-only Dockerfile (builds and runs only the NestJS API)
# Usage (from repo root):
#   docker build -f Dockerfile.backend -t vota-ai-backend .
#   docker run --rm -p 3000:3000 --env-file backend/.env vota-ai-backend

# ---------- Builder stage ----------
FROM node:18-alpine AS builder

WORKDIR /app

# Copy dependency manifests from backend
COPY backend/package*.json ./
COPY backend/database/package*.json ./database/

# Install dependencies (include devDeps for build). Use npm install to avoid lock mismatch issues in CI
RUN rm -f package-lock.json \
  && npm install --no-audit --no-fund \
  && npm cache clean --force

# Copy backend source
COPY backend/ .

# Build the application
RUN npm run build

# ---------- Production stage ----------
FROM node:18-alpine AS production

WORKDIR /app

RUN apk add --no-cache postgresql-client curl

# Install only production deps
COPY backend/package*.json ./
COPY backend/database/package*.json ./database/
RUN rm -f package-lock.json \
  && npm install --omit=dev --no-audit --no-fund \
  && npm cache clean --force

# Copy built artifacts and scripts
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/database ./database
COPY --from=builder /app/start.sh ./start.sh

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs \
    && adduser -S nestjs -u 1001 \
    && chmod +x ./start.sh \
    && chown -R nestjs:nodejs /app
USER nestjs

# Expose API port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -fsS http://localhost:3000/health || exit 1

# Start API
CMD ["./start.sh"]
